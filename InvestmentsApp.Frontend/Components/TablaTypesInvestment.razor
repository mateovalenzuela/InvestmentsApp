@using InvestmentsApp.Frontend.Services
@inject ITypeInvestmentService TypeInvestmentService
@inject IJSRuntime JSRuntime

<table class="table table-striped table-responsive">
    <thead class="table-dark">
        <tr>
            <th class="text-center">Descripción</th>
            <th class="text-center">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var type in TypesInvestments)
        {
            <tr>
                <td class="text-center">@type.Descripcion</td>
                <td class="text-center">
                    <EditButton OnClick="() => SelectToEdit.InvokeAsync(type.Id)" />
                    <DeleteButton OnClick="() => HandleDelete(type.Id, type.Descripcion)" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<ClientSwagger.TypeInvestmentDto> TypesInvestments { get; set; }

    [Parameter]
    public EventCallback<long?> SelectToEdit { get; set; }

    [Parameter]
    public EventCallback GetTypesInvestment { get; set; }

    private async Task HandleDelete(long id, string descripcion)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Seguro que deseas eliminar '{descripcion}'?");
        if (confirmed)
        {
            await DeleteTypeInvestment(id);
            await GetTypesInvestment.InvokeAsync();
        }
    }

    private async Task DeleteTypeInvestment(long id)
    {
        try
        {
            await TypeInvestmentService.DeleteTypeInvestment(id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el tipo de inversión: {ex.Message}");
        }
    }
}
