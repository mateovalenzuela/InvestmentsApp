@using InvestmentsApp.Frontend.Services
@inject ITypeInvestmentService TypeInvestmentService
@inject NavigationManager Navigation

<div class="card">
    <div class="card-header">
        <h3 class="card-title">@FormTitle</h3>
    </div>

    <div class="card-body">
        <EditForm Model="@typeInvestmentDto" OnValidSubmit="HandleSaveForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Descripción:</label>
                <InputText @bind-Value="typeInvestmentDto.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => typeInvestmentDto.Descripcion)" />
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">@ButtonText</button>
                @if (Id.HasValue)
                {
                    <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancelar</button>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public EventCallback GetTypesInvestment { get; set; }

    [Parameter]
    public EventCallback ClearForm { get; set; }

    private ClientSwagger.TypeInvestmentDto typeInvestmentDto = new();

    private string FormTitle => Id.HasValue ? "Editar Tipo de Inversión" : "Agregar Tipo de Inversión";
    private string ButtonText => Id.HasValue ? "Actualizar" : "Agregar";

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue && Id > 0)
        {
            typeInvestmentDto = await GetSelectedTypeInvestment();
        }
        else
        {
            typeInvestmentDto = new ClientSwagger.TypeInvestmentDto();
        }
    }

    private async Task<ClientSwagger.TypeInvestmentDto> GetSelectedTypeInvestment()
    {
        var selectedType = await TypeInvestmentService.GetSelectedTypeInvestment(Id.Value);
        return new ClientSwagger.TypeInvestmentDto
            {
                Descripcion = selectedType.Descripcion
            };
    }

    private async Task HandleSaveForm()
    {
        try
        {
            if (Id.HasValue && Id > 0)
            {
                // Actualizar
                await TypeInvestmentService.UpdateTypeInvestment(Id.Value, new ClientSwagger.UpdateTypeInvestmentDto
                    {
                        Descripcion = typeInvestmentDto.Descripcion
                    });
            }
            else
            {
                // Crear
                await TypeInvestmentService.AddTypeInvestment(new ClientSwagger.InsertTypeInvestmentDto
                    {
                        Descripcion = typeInvestmentDto.Descripcion,
                        FechaCreacion = DateTime.Now
                    });
            }

            ResetForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar el tipo de inversión: {ex.Message}");
        }
        finally
        {
            if (GetTypesInvestment.HasDelegate)
            {
                await GetTypesInvestment.InvokeAsync();
            }
        }
    }

    private void HandleCancel()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        ClearForm.InvokeAsync();
    }
}
