@page "/investmentAddForm"
@using InvestmentsApp.Frontend.Services
@inject IInvestmentService InvestmentService
@inject ITypeInvestmentService TypeInvestmentService
@inject NavigationManager Navigation

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Agregar Inversión</h3>
            </div>

            <div class="card-body">
                <EditForm Model="@newInvestment" OnValidSubmit="HandleSaveInvestment">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Ticker:</label>
                        <InputText @bind-Value="newInvestment.Ticker" class="form-control" />
                        <ValidationMessage For="@(() => newInvestment.Ticker)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Tipo de Inversión:</label>
                        <select @bind="newInvestment.IdTypeInvestment" class="form-select">

                            @if (tiposDeInversion == null)
                            {
                                <option disable value="">"No hay categorias cargadas"</option>
                            }
                            else
                            {
                                <option value="">Seleccione un tipo</option>

                                @foreach (var tipo in tiposDeInversion)
                                {
                                    <option value="@tipo.Id">@tipo.Descripcion</option>
                                }
                            }

                        </select>
                        <ValidationMessage For="@(() => newInvestment.IdTypeInvestment)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Descripción:</label>
                        <InputText @bind-Value="newInvestment.Descripcion" class="form-control" />
                        <ValidationMessage For="@(() => newInvestment.Descripcion)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Fecha de Entrada:</label>
                        <InputDate @bind-Value="newInvestment.FechaEntrada" class="form-control" />
                        <ValidationMessage For="@(() => newInvestment.FechaEntrada)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Fecha de Cierre:</label>
                        <InputDate @bind-Value="newInvestment.FechaCierre" class="form-control" />
                        <ValidationMessage For="@(() => newInvestment.FechaCierre)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Importe Inicial:</label>
                        <InputNumber @bind-Value="newInvestment.ImporteInicial" class="form-control" />
                        <ValidationMessage For="@(() => newInvestment.ImporteInicial)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Importe Final:</label>
                        <InputNumber @bind-Value="newInvestment.ImporteFinal" class="form-control" />
                        <ValidationMessage For="@(() => newInvestment.ImporteFinal)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Guardar</button>
                </EditForm>

            </div>
        </div>
    </div>
</div>




@code {
    private ClientSwagger.InsertInvestmentDto newInvestment = new();
    private IEnumerable<ClientSwagger.TypeInvestmentDto>? tiposDeInversion;

    protected override async Task OnInitializedAsync()
    {
        newInvestment = new ClientSwagger.InsertInvestmentDto();
        tiposDeInversion = await GetTypeInvestment();
    }

    private async Task HandleSaveInvestment()
    {

        var result = await InvestmentService.AddInvestment(newInvestment);
        Navigation.NavigateTo("/");
    }


    private async Task<IEnumerable<ClientSwagger.TypeInvestmentDto>> GetTypeInvestment()
        =>  await TypeInvestmentService.GetTypesInvestment();
    
}

