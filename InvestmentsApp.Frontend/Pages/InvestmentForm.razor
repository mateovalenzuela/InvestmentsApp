@page "/investmentForm/{id:long?}"
@using InvestmentsApp.Frontend.Services
@inject IInvestmentService InvestmentService
@inject ITypeInvestmentService TypeInvestmentService
@inject NavigationManager Navigation

<div class="row justify-content-center">
    <div class="col-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">@FormTitle</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@investmentDto" OnValidSubmit="HandleSaveInvestment">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Campos del formulario -->
                    <div class="mb-3">
                        <label class="form-label">Ticker:</label>
                        <InputText @bind-Value="investmentDto.Ticker" class="form-control" />
                        <ValidationMessage For="@(() => insertInvestmentDto.Ticker)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Tipo de Inversión:</label>
                        <select @bind="investmentDto.IdTypeInvestment" class="form-select">
                            @if (tiposDeInversion == null || !tiposDeInversion.Any())
                            {
                                <option disabled value="">No hay categorías cargadas</option>
                            }
                            else
                            {
                                <option value="">Seleccione un tipo</option>
                                @foreach (var tipo in tiposDeInversion)
                                {
                                    <option value="@tipo.Id">@tipo.Descripcion</option>
                                }
                            }
                        </select>
                        <ValidationMessage For="@(() => insertInvestmentDto.IdTypeInvestment)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Descripción:</label>
                        <InputText @bind-Value="investmentDto.Descripcion" class="form-control" />
                        <ValidationMessage For="@(() => insertInvestmentDto.Descripcion)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Fecha de Entrada:</label>
                        <InputDate @bind-Value="investmentDto.FechaEntrada" class="form-control" />
                        <ValidationMessage For="@(() => insertInvestmentDto.FechaEntrada)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Fecha de Cierre:</label>
                        <InputDate @bind-Value="investmentDto.FechaCierre" class="form-control" />
                        <ValidationMessage For="@(() => insertInvestmentDto.FechaCierre)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Importe Inicial:</label>
                        <InputNumber @bind-Value="investmentDto.ImporteInicial" class="form-control" />
                        <ValidationMessage For="@(() => insertInvestmentDto.ImporteInicial)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Importe Final:</label>
                        <InputNumber @bind-Value="investmentDto.ImporteFinal" class="form-control" />
                        <ValidationMessage For="@(() => insertInvestmentDto.ImporteFinal)" />
                    </div>

                    <button type="submit" class="btn btn-primary">@ButtonText</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public long? id { get; set; }
    private ClientSwagger.InvestmentDto investmentDto = new();
    private ClientSwagger.InsertInvestmentDto insertInvestmentDto = new();
    private ClientSwagger.UpdateInvestmentDto updateInvestmentDto = new();
    private IEnumerable<ClientSwagger.TypeInvestmentDto>? tiposDeInversion;

    private string FormTitle => id.HasValue && id > 0 ? "Editar Inversión" : "Agregar Inversión";
    private string ButtonText => id.HasValue && id > 0 ? "Actualizar" : "Guardar";

    protected override async Task OnInitializedAsync()
    {
        tiposDeInversion = await GetTypeInvestment();

        if (id.HasValue && id > 0)
        {
            // Modo edición
            var investment = await GetSelectedInvestment(id.Value);
            investmentDto = new ClientSwagger.InvestmentDto
            {
                Ticker = investment.Ticker,
                Descripcion = investment.Descripcion,
                FechaEntrada = investment.FechaEntrada,
                FechaCierre = investment.FechaCierre,
                ImporteInicial = investment.ImporteInicial,
                ImporteFinal = investment.ImporteFinal,
                IdTypeInvestment = investment.IdTypeInvestment
            };
        }
        else
        {
            // Modo creación
            investmentDto = new ClientSwagger.InvestmentDto();
        }
    }

    private async Task HandleSaveInvestment()
    {
        if (id.HasValue && id > 0)
        {
            await UpdateInvestment();
        }
        else
        {
            await AddInvestment();
        }

        Navigation.NavigateTo("/");
    }

    private async Task AddInvestment()
    {
        var insertDto = new ClientSwagger.InsertInvestmentDto
        {
            Ticker = investmentDto.Ticker,
            Descripcion = investmentDto.Descripcion,
            FechaEntrada = investmentDto.FechaEntrada,
            FechaCierre = investmentDto.FechaCierre,
            ImporteInicial = investmentDto.ImporteInicial,
            ImporteFinal = investmentDto.ImporteFinal,
            IdTypeInvestment = investmentDto.IdTypeInvestment,
            FechaCreacion = DateTime.Now
        };
        await InvestmentService.AddInvestment(insertDto);
    }

    private async Task UpdateInvestment()
    {
        updateInvestmentDto = new ClientSwagger.UpdateInvestmentDto
        {
            Ticker = investmentDto.Ticker,
            Descripcion = investmentDto.Descripcion,
            FechaEntrada = investmentDto.FechaEntrada,
            FechaCierre = investmentDto.FechaCierre,
            ImporteInicial = investmentDto.ImporteInicial,
            ImporteFinal = investmentDto.ImporteFinal,
            IdTypeInvestment = investmentDto.IdTypeInvestment
        };
        await InvestmentService.UpdateInvestment(id.Value, updateInvestmentDto);
    }

    private async Task<IEnumerable<ClientSwagger.TypeInvestmentDto>> GetTypeInvestment()
        => await TypeInvestmentService.GetTypesInvestment();

    private async Task<ClientSwagger.InvestmentDto> GetSelectedInvestment(long id)
        => await InvestmentService.GetSelectedInvestment(id);

}