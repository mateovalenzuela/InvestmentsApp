@page "/investmentEditForm/{id:long}"
@using InvestmentsApp.Frontend.Services
@inject IInvestmentService InvestmentService
@inject ITypeInvestmentService TypeInvestmentService
@inject NavigationManager Navigation

<h3>Editar Inversión</h3>

<EditForm Model="@investmentToEdit" OnValidSubmit="HandleUpdateInvestment">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Ticker:</label>
        <InputText @bind-Value="investmentToEdit.Tikcker" class="form-control" />
        <ValidationMessage For="@(() => investmentToEdit.Tikcker)" />
    </div>

    <div>
        <label>Tipo de Inversión:</label>
        <select @bind="investmentToEdit.IdTypeInvestment" class="form-control">
            @if (tiposDeInversion == null)
            {
                <option disabled value="">"No hay categorías cargadas"</option>
            }
            else
            {
                <option value="">Seleccione un tipo</option>
                @foreach (var tipo in tiposDeInversion)
                {
                    <option value="@tipo.Id" selected="@((tipo.Id == investmentToEdit.IdTypeInvestment))">@tipo.Descripcion</option>
                }
            }
        </select>
        <ValidationMessage For="@(() => investmentToEdit.IdTypeInvestment)" />
    </div>

    <div>
        <label>Descripción:</label>
        <InputText @bind-Value="investmentToEdit.Descripcion" class="form-control" />
        <ValidationMessage For="@(() => investmentToEdit.Descripcion)" />
    </div>

    <div>
        <label>Fecha de Entrada:</label>
        <InputDate @bind-Value="investmentToEdit.FechaEntrada" class="form-control" />
        <ValidationMessage For="@(() => investmentToEdit.FechaEntrada)" />
    </div>

    <div>
        <label>Fecha de Cierre:</label>
        <InputDate @bind-Value="investmentToEdit.FechaCierre" class="form-control" />
        <ValidationMessage For="@(() => investmentToEdit.FechaCierre)" />
    </div>

    <div>
        <label>Importe Inicial:</label>
        <InputNumber @bind-Value="investmentToEdit.ImporteInicial" class="form-control" />
        <ValidationMessage For="@(() => investmentToEdit.ImporteInicial)" />
    </div>

    <div>
        <label>Importe Final:</label>
        <InputNumber @bind-Value="investmentToEdit.ImporteFinal" class="form-control" />
        <ValidationMessage For="@(() => investmentToEdit.ImporteFinal)" />
    </div>

    <button type="submit" class="btn btn-primary">Actualizar</button>
</EditForm>

@code {
    [Parameter] public long id { get; set; }
    private ClientSwagger.UpdateInvestmentDto investmentToEdit = new();
    private IEnumerable<ClientSwagger.TypeInvestmentDto>? tiposDeInversion;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            investmentToEdit = await HandleGetSelectedInvestment();
            tiposDeInversion = await GetTypeInvestment();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los datos: {ex.Message}");
        }
    }

    private async Task HandleUpdateInvestment()
    {
        try
        {
            await UpdateInvestment();
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar la inversión: {ex.Message}");
        }
    }

    private async Task UpdateInvestment()
    {
        await InvestmentService.UpdateInvestment(id, investmentToEdit);
    }

    private async Task<IEnumerable<ClientSwagger.TypeInvestmentDto>> GetTypeInvestment()
        => await TypeInvestmentService.GetTypesInvestment();


    private async Task<ClientSwagger.InvestmentDto> GetSelectedInvestment(long id)
        => await InvestmentService.GetSelectedInvestment(id);

    private async Task<ClientSwagger.UpdateInvestmentDto> HandleGetSelectedInvestment()
    {
        var investmentDto = await GetSelectedInvestment(id);

        var updateInvestmentDto = new ClientSwagger.UpdateInvestmentDto
        {
            Tikcker = investmentDto.Tikcker,
            Descripcion = investmentDto.Descripcion,
            FechaEntrada = investmentDto.FechaEntrada,
            FechaCierre = investmentDto.FechaCierre,
            ImporteInicial = investmentDto.ImporteInicial,
            ImporteFinal = investmentDto.ImporteFinal,
            IdTypeInvestment = investmentDto.IdTypeInvestment
        };
        return updateInvestmentDto;
    }
}

