@using InvestmentsApp.Frontend.Services
@inject IInvestmentService InvestmentService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Tabla de Inversiones</h3>

<table class="table table-striped table-hover table-responsive">
    <thead class="table-dark">
        <tr>
            <th scope ="col">Ticker</th>
            <th scope="col">Categoría</th>
            <th scope="col">Fecha de Cierre</th>
            <th scope="col">Importe Inicial</th>
            <th scope="col">Importe Final</th>
            <th scope="col">Rendimiento</th>
            <th scope="col">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var investment in Investments)
        {
            <tr @onclick="() => HandleDetailInvestment(investment.Id)">
                <td>@investment.Ticker</td>
                <td>@investment.TypeInvestmentDescripcion</td>
                <td>@investment.FechaCierre.ToLocalTime().ToString("dd/MM/yyyy")</td>
                <td>$@investment.ImporteInicial</td>
                <td>$@investment.ImporteFinal</td>
                <td>@investment.Rendimiento.ToString("0.00")%</td>
                <td>
                    <EditButton OnClick="() => NavigateToEditInvestment(investment.Id)" />
                    <DeleteButton OnClick="() => HandleDeleteInvestment(investment)" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<ClientSwagger.InvestmentDto> Investments { get; set; }

    private void NavigateToEditInvestment(long id)
    {
        Navigation.NavigateTo($"/investmentEditForm/{id}");
    }

    private async Task ConfirmDeleteInvestment(ClientSwagger.InvestmentDto investment)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que deseas eliminar la inversión con Ticker {investment.Ticker}?");

        if (confirmed)
        {
            await DeleteInvestment(investment.Id);
        }
    }

    private async Task HandleDeleteInvestment(ClientSwagger.InvestmentDto investment)
    {
        await ConfirmDeleteInvestment(investment);
        Navigation.NavigateTo("/", forceLoad: true);

    }

    private async Task DeleteInvestment(long id)
    {
        await InvestmentService.DeleteInvestment(id);
    }

    private async Task HandleDetailInvestment(long id)
    {
        Navigation.NavigateTo($"/investmentDetail/{id}");

    }
}

