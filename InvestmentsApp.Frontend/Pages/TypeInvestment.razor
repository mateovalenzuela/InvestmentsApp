@page "/typesInvestment"
@using InvestmentsApp.Frontend.Services
@using InvestmentsApp.Frontend.Components
@inject ITypeInvestmentService TypeInvestmentService
@inject NavigationManager Navigation

<div class="row">
    <div class="col-12">
        <h3>Gestión de Tipos de Inversión</h3>
    </div>

    <!-- Formulario -->
    <div class="col-md-6 p-2">
        <TypeInvestmentForm GetTypesInvestment="@GetTypesInvestments" Id="@Id" ClearForm="@ClearForm"/>
    </div>

    <!-- Tabla de Tipos de Inversión -->
    <div class="col-md-6 p-2">
        @if (isLoading)
        {
            <div class="alert alert-info">Cargando tipos de inversión...</div>
        }
        else if (typesInvestments == null || !typesInvestments.Any())
        {
            <div class="alert alert-warning">No hay tipos de inversión registrados.</div>
        }
        else
        {
            <TablaTypesInvestment TypesInvestments="@typesInvestments"
            GetTypesInvestment="@GetTypesInvestments"
            SelectToEdit="SelectToEdit" />
        }
    </div>
</div>

@code {
    private IEnumerable<ClientSwagger.TypeInvestmentDto>? typesInvestments;
    private long? Id { get; set; }
    private bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTypesInvestment();
    }

    private async Task LoadTypesInvestment()
    {
        try
        {
            isLoading = true;
            typesInvestments = await TypeInvestmentService.GetTypesInvestment();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los tipos de inversión: {ex.Message}");
            typesInvestments = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GetTypesInvestments()
    {
        await LoadTypesInvestment();
    }

    private void SelectToEdit(long? id)
    {
        Id = id;
    }

    private void ClearForm()
    {
        SelectToEdit(null);
    }
}
