@page "/typeInvestmentUpdate/{id:long}"
@using InvestmentsApp.Frontend.Services
@inject ITypeInvestmentService TypeInvestmentService
@inject NavigationManager Navigation

<div class="row justify-content-center pt-4">
    <div class="col-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Acrualizar Tipo de Inversión</h3>
            </div>

            <div class="card-body">
                <EditForm Model="@updateTypeInvestment" OnValidSubmit="HandleSaveForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Descripción:</label>
                        <InputText @bind-Value="updateTypeInvestment.Descripcion" class="form-control" />
                        <ValidationMessage For="@(() => updateTypeInvestment.Descripcion)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Actualizar</button>
                    <button type="button" @onclick="() => HandleVolver()" class="btn btn-secondary">Volver</button>

                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public long id { get; set; }

    private ClientSwagger.TypeInvestmentDto TypeInvestments { get; set; }
    private ClientSwagger.UpdateTypeInvestmentDto updateTypeInvestment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeTypeInvestmentForUpdate();
    }


    private async Task InitializeTypeInvestmentForUpdate()
    {
        try
        {
            updateTypeInvestment = new ClientSwagger.UpdateTypeInvestmentDto();

            TypeInvestments = await TypeInvestmentService.GetSelectedTypeInvestment(id);
            updateTypeInvestment.Descripcion = TypeInvestments.Descripcion;
        }
        catch (Exception ex)
        {
            TypeInvestments = null;
            updateTypeInvestment = new();
        }
    }


    private async Task HandleSaveForm()
    {
        await HandleUpdateTypeInvestment();
        HandleVolver();
    }

    private async Task HandleUpdateTypeInvestment()
    {
        try {
            await TypeInvestmentService.UpdateTypeInvestment(TypeInvestments.Id, updateTypeInvestment);
        }catch (Exception ex) {
            updateTypeInvestment = new();
        }
    }

    private void HandleVolver(){
        Navigation.NavigateTo("/typesInvestment", forceLoad: true);
    }
}

