@page "/typeInvestmentUpdate/{id:long}"
@using InvestmentsApp.Frontend.Services
@inject ITypeInvestmentService TypeInvestmentService
@inject NavigationManager Navigation

<h3>Acrualizar Tipo de Inversión</h3>

<EditForm Model="@updateTypeInvestment" OnValidSubmit="HandleSaveForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Descripción:</label>
        <InputText @bind-Value="updateTypeInvestment.Descripcion" class="form-control" />
        <ValidationMessage For="@(() => updateTypeInvestment.Descripcion)" />
    </div>


    <button type="submit" class="btn btn-primary">Actualizar</button>
    <button type="button" @onclick="() => HandleVolver()" class="btn btn-secondary">Volver</button>



</EditForm>

@code {

    [Parameter]
    public long id { get; set; }

    private ClientSwagger.TypeInvestmentDto TypeInvestments { get; set; }
    private ClientSwagger.UpdateTypeInvestmentDto updateTypeInvestment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeTypeInvestmentForUpdate();
    }


    private async Task InitializeTypeInvestmentForUpdate()
    {
        updateTypeInvestment = new ClientSwagger.UpdateTypeInvestmentDto();

        TypeInvestments = await TypeInvestmentService.GetSelectedTypeInvestment(id);
        updateTypeInvestment.Descripcion = TypeInvestments.Descripcion;
    }


    private async Task HandleSaveForm()
    {
        await HandleUpdateTypeInvestment();
        HandleVolver();
    }

    private async Task HandleUpdateTypeInvestment()
    {
        await TypeInvestmentService.UpdateTypeInvestment(TypeInvestments.Id, updateTypeInvestment);
    }

    private void HandleVolver(){
        Navigation.NavigateTo("/typesInvestment", forceLoad: true);
    }
}

